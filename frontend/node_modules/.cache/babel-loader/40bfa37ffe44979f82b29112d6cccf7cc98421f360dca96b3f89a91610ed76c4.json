{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maali\\\\OneDrive\\\\Desktop\\\\MUSIC\\\\MUSIC\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuthState = async () => {\n      const token = localStorage.getItem('token');\n      const storedUser = localStorage.getItem('user');\n      if (token && storedUser) {\n        try {\n          // Validate token with backend\n          const response = await fetch('http://localhost:5000/api/auth/me', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          if (response.ok) {\n            const data = await response.json();\n            setIsAuthenticated(true);\n            setUser(data);\n            // Update stored user data\n            localStorage.setItem('user', JSON.stringify(data));\n          } else {\n            // Token is invalid or expired\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            setIsAuthenticated(false);\n            setUser(null);\n          }\n        } catch (error) {\n          console.error('Auth check error:', error);\n          // Only clear auth state if it's a network error\n          if (error.name === 'TypeError') {\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            setIsAuthenticated(false);\n            setUser(null);\n          }\n        }\n      } else {\n        setIsAuthenticated(false);\n        setUser(null);\n      }\n      setLoading(false);\n    };\n    checkAuthState();\n\n    // Set up periodic token validation (every 5 minutes)\n    const intervalId = setInterval(checkAuthState, 5 * 60 * 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      setIsAuthenticated(true);\n      setUser(data.user);\n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      setIsAuthenticated(true);\n      setUser(data.user);\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n  const loginArtist = async credentials => {\n    try {\n      const response = await fetch('http://localhost:5000/api/artist/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Artist login failed');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      setIsAuthenticated(true);\n      setUser(data.user);\n      return true;\n    } catch (error) {\n      console.error('Artist login error:', error);\n      throw error;\n    }\n  };\n  const registerArtist = async artistData => {\n    try {\n      const response = await fetch('http://localhost:5000/api/artist/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(artistData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Artist registration failed');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      setIsAuthenticated(true);\n      setUser(data.user);\n      return true;\n    } catch (error) {\n      console.error('Artist registration error:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n\n  // New function to set auth data manually (for temporary admin login)\n  const setAuthData = (token, userData) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setIsAuthenticated(true);\n    setUser(userData);\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    register,\n    loginArtist,\n    registerArtist,\n    logout,\n    setAuthData\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","checkAuthState","token","localStorage","getItem","storedUser","response","fetch","headers","ok","data","json","setItem","JSON","stringify","removeItem","error","console","name","intervalId","setInterval","clearInterval","login","email","password","method","body","errorData","Error","message","register","userData","loginArtist","credentials","registerArtist","artistData","logout","setAuthData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/maali/OneDrive/Desktop/MUSIC/MUSIC/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const checkAuthState = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const storedUser = localStorage.getItem('user');\r\n      \r\n      if (token && storedUser) {\r\n        try {\r\n          // Validate token with backend\r\n          const response = await fetch('http://localhost:5000/api/auth/me', {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`,\r\n            },\r\n          });\r\n\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setIsAuthenticated(true);\r\n            setUser(data);\r\n            // Update stored user data\r\n            localStorage.setItem('user', JSON.stringify(data));\r\n          } else {\r\n            // Token is invalid or expired\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n            setIsAuthenticated(false);\r\n            setUser(null);\r\n          }\r\n        } catch (error) {\r\n          console.error('Auth check error:', error);\r\n          // Only clear auth state if it's a network error\r\n          if (error.name === 'TypeError') {\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n            setIsAuthenticated(false);\r\n            setUser(null);\r\n          }\r\n        }\r\n      } else {\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuthState();\r\n\r\n    // Set up periodic token validation (every 5 minutes)\r\n    const intervalId = setInterval(checkAuthState, 5 * 60 * 1000);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Login failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n      setIsAuthenticated(true);\r\n      setUser(data.user);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Registration failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n      setIsAuthenticated(true);\r\n      setUser(data.user);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const loginArtist = async (credentials) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/artist/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Artist login failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n      setIsAuthenticated(true);\r\n      setUser(data.user);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Artist login error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const registerArtist = async (artistData) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/artist/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(artistData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Artist registration failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n      setIsAuthenticated(true);\r\n      setUser(data.user);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Artist registration error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n  };\r\n\r\n  // New function to set auth data manually (for temporary admin login)\r\n  const setAuthData = (token, userData) => {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    setIsAuthenticated(true);\r\n    setUser(userData);\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    loginArtist,\r\n    registerArtist,\r\n    logout,\r\n    setAuthData,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}