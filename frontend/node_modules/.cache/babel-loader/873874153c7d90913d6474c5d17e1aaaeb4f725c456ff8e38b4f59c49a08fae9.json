{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maali\\\\OneDrive\\\\Desktop\\\\MUSIC\\\\frontend\\\\src\\\\components\\\\AudioPlayer.js\",\n  _s = $RefreshSig$();\n/**\r\n * AudioPlayer component\r\n * ---------------------\r\n * Handles all audio playback logic and state locally.\r\n * Memoized with React.memo to prevent unnecessary re-renders.\r\n * [Optimization] Playback state is now fully internal.\r\n * Only re-renders on track change, not on play/pause/seek.\r\n */\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport { useTrackSelection } from '../context/TrackSelectionContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioPlayer = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(function AudioPlayer({\n  initialVolume = 1\n}) {\n  var _selectedTrackId$arti;\n  _s();\n  const {\n    selectedTrackId\n  } = useTrackSelection();\n  // --- RENDER OPTIMIZATION ---\n  // isPlaying and all playback logic are internal.\n  // This prevents parent re-renders on play/pause/seek.\n  const audioRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(initialVolume);\n  const prevTrackId = useRef(null);\n  const shouldAutoPlay = useRef(false);\n\n  // --- RENDER OPTIMIZATION ---\n  // When track changes, reset state and auto-play.\n  // This ensures AudioPlayer only re-renders on track change.\n  useEffect(() => {\n    if (!selectedTrackId) return;\n    if (prevTrackId.current !== selectedTrackId) {\n      setIsPlaying(true);\n      setCurrentTime(0);\n      prevTrackId.current = selectedTrackId;\n      shouldAutoPlay.current = true;\n    }\n  }, [selectedTrackId]);\n  useEffect(() => {\n    if (!audioRef.current) return;\n    if (isPlaying) {\n      // Only play if metadata is loaded\n      if (!audioRef.current.paused && !audioRef.current.ended) return;\n      audioRef.current.play().catch(() => {});\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying, selectedTrackId]);\n  const handleLoadedMetadata = useCallback(() => {\n    setDuration(audioRef.current.duration);\n    // Auto-play if flagged\n    if (shouldAutoPlay.current) {\n      audioRef.current.play().catch(() => {});\n      shouldAutoPlay.current = false;\n    }\n  }, []);\n  const handleTimeUpdate = useCallback(() => {\n    setCurrentTime(audioRef.current.currentTime);\n  }, []);\n  const handleSeek = useCallback(e => {\n    const time = Number(e.target.value);\n    audioRef.current.currentTime = time;\n    setCurrentTime(time);\n  }, []);\n  const handleVolumeChange = useCallback(e => {\n    const vol = Number(e.target.value);\n    setVolume(vol);\n    audioRef.current.volume = vol;\n  }, []);\n  const handleEnded = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n  const handlePlayPause = useCallback(() => {\n    setIsPlaying(prev => !prev);\n  }, []);\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  if (!selectedTrackId) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"music-player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-cover-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedTrackId.coverImage ? `http://localhost:5000/${selectedTrackId.coverImage}` : '',\n          alt: selectedTrackId.title,\n          className: \"track-cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: selectedTrackId.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: ((_selectedTrackId$arti = selectedTrackId.artist) === null || _selectedTrackId$arti === void 0 ? void 0 : _selectedTrackId$arti.name) || 'Unknown Artist'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"volume-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"volume-icon\",\n        children: \"\\uD83D\\uDD0A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"1\",\n        step: \"0.01\",\n        value: volume,\n        onChange: handleVolumeChange,\n        className: \"volume-slider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button play-pause\",\n          onClick: handlePlayPause,\n          children: isPlaying ? '❚❚' : '▶'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"time-info\",\n          children: [formatTime(currentTime), \"\\xA0/\\xA0\", formatTime(duration)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: duration || 0,\n          value: currentTime,\n          onChange: handleSeek,\n          className: \"progress-slider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: `http://localhost:5000/${selectedTrackId.audioFile}`,\n      onLoadedMetadata: handleLoadedMetadata,\n      onTimeUpdate: handleTimeUpdate,\n      onEnded: handleEnded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}, \"5SkK89Z/h2NKtwCXydreUB8cB8Q=\", false, function () {\n  return [useTrackSelection];\n})), \"5SkK89Z/h2NKtwCXydreUB8cB8Q=\", false, function () {\n  return [useTrackSelection];\n});\n_c2 = AudioPlayer;\nexport default AudioPlayer;\nvar _c, _c2;\n$RefreshReg$(_c, \"AudioPlayer$React.memo\");\n$RefreshReg$(_c2, \"AudioPlayer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","useTrackSelection","jsxDEV","_jsxDEV","AudioPlayer","_s","memo","_c","initialVolume","_selectedTrackId$arti","selectedTrackId","audioRef","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","volume","setVolume","prevTrackId","shouldAutoPlay","current","paused","ended","play","catch","pause","handleLoadedMetadata","handleTimeUpdate","handleSeek","e","time","Number","target","value","handleVolumeChange","vol","handleEnded","handlePlayPause","prev","formatTime","minutes","Math","floor","seconds","toString","padStart","className","children","src","coverImage","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","artist","name","type","min","max","step","onChange","onClick","ref","audioFile","onLoadedMetadata","onTimeUpdate","onEnded","_c2","$RefreshReg$"],"sources":["C:/Users/maali/OneDrive/Desktop/MUSIC/frontend/src/components/AudioPlayer.js"],"sourcesContent":["/**\r\n * AudioPlayer component\r\n * ---------------------\r\n * Handles all audio playback logic and state locally.\r\n * Memoized with React.memo to prevent unnecessary re-renders.\r\n * [Optimization] Playback state is now fully internal.\r\n * Only re-renders on track change, not on play/pause/seek.\r\n */\r\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\r\nimport { useTrackSelection } from '../context/TrackSelectionContext';\r\n\r\nconst AudioPlayer = React.memo(function AudioPlayer({ initialVolume = 1 }) {\r\n  const { selectedTrackId } = useTrackSelection();\r\n  // --- RENDER OPTIMIZATION ---\r\n  // isPlaying and all playback logic are internal.\r\n  // This prevents parent re-renders on play/pause/seek.\r\n  const audioRef = useRef(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [volume, setVolume] = useState(initialVolume);\r\n  const prevTrackId = useRef(null);\r\n  const shouldAutoPlay = useRef(false);\r\n\r\n  // --- RENDER OPTIMIZATION ---\r\n  // When track changes, reset state and auto-play.\r\n  // This ensures AudioPlayer only re-renders on track change.\r\n  useEffect(() => {\r\n    if (!selectedTrackId) return;\r\n    if (prevTrackId.current !== selectedTrackId) {\r\n      setIsPlaying(true);\r\n      setCurrentTime(0);\r\n      prevTrackId.current = selectedTrackId;\r\n      shouldAutoPlay.current = true;\r\n    }\r\n  }, [selectedTrackId]);\r\n\r\n  useEffect(() => {\r\n    if (!audioRef.current) return;\r\n    if (isPlaying) {\r\n      // Only play if metadata is loaded\r\n      if (!audioRef.current.paused && !audioRef.current.ended) return;\r\n      audioRef.current.play().catch(() => {});\r\n    } else {\r\n      audioRef.current.pause();\r\n    }\r\n  }, [isPlaying, selectedTrackId]);\r\n\r\n  const handleLoadedMetadata = useCallback(() => {\r\n    setDuration(audioRef.current.duration);\r\n    // Auto-play if flagged\r\n    if (shouldAutoPlay.current) {\r\n      audioRef.current.play().catch(() => {});\r\n      shouldAutoPlay.current = false;\r\n    }\r\n  }, []);\r\n\r\n  const handleTimeUpdate = useCallback(() => {\r\n    setCurrentTime(audioRef.current.currentTime);\r\n  }, []);\r\n\r\n  const handleSeek = useCallback((e) => {\r\n    const time = Number(e.target.value);\r\n    audioRef.current.currentTime = time;\r\n    setCurrentTime(time);\r\n  }, []);\r\n\r\n  const handleVolumeChange = useCallback((e) => {\r\n    const vol = Number(e.target.value);\r\n    setVolume(vol);\r\n    audioRef.current.volume = vol;\r\n  }, []);\r\n\r\n  const handleEnded = useCallback(() => {\r\n    setIsPlaying(false);\r\n  }, []);\r\n\r\n  const handlePlayPause = useCallback(() => {\r\n    setIsPlaying((prev) => !prev);\r\n  }, []);\r\n\r\n  const formatTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  if (!selectedTrackId) return null;\r\n\r\n  return (\r\n    <div className=\"music-player\">\r\n      {/* --- RENDER OPTIMIZATION ---\r\n          All playback controls and state are internal to AudioPlayer. */}\r\n      <div className=\"player-info\">\r\n        <div className=\"track-cover-container\">\r\n          <img\r\n            src={selectedTrackId.coverImage ? `http://localhost:5000/${selectedTrackId.coverImage}` : ''}\r\n            alt={selectedTrackId.title}\r\n            className=\"track-cover\"\r\n          />\r\n        </div>\r\n        <div className=\"track-details\">\r\n          <h3>{selectedTrackId.title}</h3>\r\n          <p>{selectedTrackId.artist?.name || 'Unknown Artist'}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"volume-controls\">\r\n        <span className=\"volume-icon\">🔊</span>\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"1\"\r\n          step=\"0.01\"\r\n          value={volume}\r\n          onChange={handleVolumeChange}\r\n          className=\"volume-slider\"\r\n        />\r\n      </div>\r\n      <div className=\"player-controls\">\r\n        <div className=\"control-buttons\">\r\n          <button className=\"control-button play-pause\" onClick={handlePlayPause}>\r\n            {isPlaying ? '❚❚' : '▶'}\r\n          </button>\r\n        </div>\r\n        <div className=\"progress-bar\">\r\n          <span className=\"time-info\">{formatTime(currentTime)}&nbsp;/&nbsp;{formatTime(duration)}</span>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max={duration || 0}\r\n            value={currentTime}\r\n            onChange={handleSeek}\r\n            className=\"progress-slider\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <audio\r\n        ref={audioRef}\r\n        src={`http://localhost:5000/${selectedTrackId.audioFile}`}\r\n        onLoadedMetadata={handleLoadedMetadata}\r\n        onTimeUpdate={handleTimeUpdate}\r\n        onEnded={handleEnded}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default AudioPlayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}