{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maali\\\\OneDrive\\\\Desktop\\\\MUSIC\\\\frontend\\\\src\\\\components\\\\AudioPlayer.js\",\n  _s = $RefreshSig$();\n/**\r\n * AudioPlayer component\r\n * ---------------------\r\n * Handles all audio playback logic and state locally.\r\n * Memoized with React.memo to prevent unnecessary re-renders.\r\n * [Optimization] Playback state is now fully internal.\r\n * Only re-renders on track change, not on play/pause/seek.\r\n */\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport { useContextSelector } from 'use-context-selector';\nimport { TrackContext } from '../context/TrackContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioPlayer = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(function AudioPlayer({\n  initialVolume = 1\n}) {\n  var _selectedTrack$artist;\n  _s();\n  // Get the full selectedTrack object\n  const selectedTrack = useContextSelector(TrackContext, v => v.selectedTrack);\n  // --- RENDER OPTIMIZATION ---\n  // isPlaying and all playback logic are internal.\n  // This prevents parent re-renders on play/pause/seek.\n  const audioRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(initialVolume);\n  const prevTrackId = useRef(null);\n  const shouldAutoPlay = useRef(false);\n\n  // --- RENDER OPTIMIZATION ---\n  // When track changes, reset state and auto-play.\n  // This ensures AudioPlayer only re-renders on track change.\n  useEffect(() => {\n    if (!selectedTrack) return;\n    if (prevTrackId.current !== selectedTrack._id) {\n      setIsPlaying(true);\n      setCurrentTime(0);\n      prevTrackId.current = selectedTrack._id;\n      shouldAutoPlay.current = true;\n    }\n  }, [selectedTrack]);\n  useEffect(() => {\n    if (!audioRef.current) return;\n    if (isPlaying) {\n      // Only play if metadata is loaded\n      if (!audioRef.current.paused && !audioRef.current.ended) return;\n      audioRef.current.play().catch(() => {});\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying, selectedTrack]);\n  const handleLoadedMetadata = useCallback(() => {\n    setDuration(audioRef.current.duration);\n    // Auto-play if flagged\n    if (shouldAutoPlay.current) {\n      audioRef.current.play().catch(() => {});\n      shouldAutoPlay.current = false;\n    }\n  }, []);\n  const handleTimeUpdate = useCallback(() => {\n    setCurrentTime(audioRef.current.currentTime);\n  }, []);\n  const handleSeek = useCallback(e => {\n    const time = Number(e.target.value);\n    audioRef.current.currentTime = time;\n    setCurrentTime(time);\n  }, []);\n  const handleVolumeChange = useCallback(e => {\n    const vol = Number(e.target.value);\n    setVolume(vol);\n    audioRef.current.volume = vol;\n  }, []);\n  const handleEnded = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n  const handlePlayPause = useCallback(() => {\n    setIsPlaying(prev => !prev);\n  }, []);\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  if (!selectedTrack) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"music-player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-cover-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedTrack.coverImage ? `http://localhost:5000/${selectedTrack.coverImage}` : '',\n          alt: selectedTrack.title,\n          className: \"track-cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: selectedTrack.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: ((_selectedTrack$artist = selectedTrack.artist) === null || _selectedTrack$artist === void 0 ? void 0 : _selectedTrack$artist.name) || 'Unknown Artist'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"volume-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"volume-icon\",\n        children: \"\\uD83D\\uDD0A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"1\",\n        step: \"0.01\",\n        value: volume,\n        onChange: handleVolumeChange,\n        className: \"volume-slider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button play-pause\",\n          onClick: handlePlayPause,\n          children: isPlaying ? '❚❚' : '▶'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"time-info\",\n          children: [formatTime(currentTime), \"\\xA0/\\xA0\", formatTime(duration)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: duration || 0,\n          value: currentTime,\n          onChange: handleSeek,\n          className: \"progress-slider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: `http://localhost:5000/${selectedTrack.audioFile}`,\n      onLoadedMetadata: handleLoadedMetadata,\n      onTimeUpdate: handleTimeUpdate,\n      onEnded: handleEnded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}, \"D0JtCIVJ/49eYS88nE/XXxCzWro=\", false, function () {\n  return [useContextSelector];\n})), \"D0JtCIVJ/49eYS88nE/XXxCzWro=\", false, function () {\n  return [useContextSelector];\n});\n_c2 = AudioPlayer;\nexport default AudioPlayer;\nvar _c, _c2;\n$RefreshReg$(_c, \"AudioPlayer$React.memo\");\n$RefreshReg$(_c2, \"AudioPlayer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","useContextSelector","TrackContext","jsxDEV","_jsxDEV","AudioPlayer","_s","memo","_c","initialVolume","_selectedTrack$artist","selectedTrack","v","audioRef","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","volume","setVolume","prevTrackId","shouldAutoPlay","current","_id","paused","ended","play","catch","pause","handleLoadedMetadata","handleTimeUpdate","handleSeek","e","time","Number","target","value","handleVolumeChange","vol","handleEnded","handlePlayPause","prev","formatTime","minutes","Math","floor","seconds","toString","padStart","className","children","src","coverImage","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","artist","name","type","min","max","step","onChange","onClick","ref","audioFile","onLoadedMetadata","onTimeUpdate","onEnded","_c2","$RefreshReg$"],"sources":["C:/Users/maali/OneDrive/Desktop/MUSIC/frontend/src/components/AudioPlayer.js"],"sourcesContent":["/**\r\n * AudioPlayer component\r\n * ---------------------\r\n * Handles all audio playback logic and state locally.\r\n * Memoized with React.memo to prevent unnecessary re-renders.\r\n * [Optimization] Playback state is now fully internal.\r\n * Only re-renders on track change, not on play/pause/seek.\r\n */\r\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\r\nimport { useContextSelector } from 'use-context-selector';\r\nimport { TrackContext } from '../context/TrackContext';\r\n\r\nconst AudioPlayer = React.memo(function AudioPlayer({ initialVolume = 1 }) {\r\n  // Get the full selectedTrack object\r\n  const selectedTrack = useContextSelector(TrackContext, v => v.selectedTrack);\r\n  // --- RENDER OPTIMIZATION ---\r\n  // isPlaying and all playback logic are internal.\r\n  // This prevents parent re-renders on play/pause/seek.\r\n  const audioRef = useRef(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [volume, setVolume] = useState(initialVolume);\r\n  const prevTrackId = useRef(null);\r\n  const shouldAutoPlay = useRef(false);\r\n\r\n  // --- RENDER OPTIMIZATION ---\r\n  // When track changes, reset state and auto-play.\r\n  // This ensures AudioPlayer only re-renders on track change.\r\n  useEffect(() => {\r\n    if (!selectedTrack) return;\r\n    if (prevTrackId.current !== selectedTrack._id) {\r\n      setIsPlaying(true);\r\n      setCurrentTime(0);\r\n      prevTrackId.current = selectedTrack._id;\r\n      shouldAutoPlay.current = true;\r\n    }\r\n  }, [selectedTrack]);\r\n\r\n  useEffect(() => {\r\n    if (!audioRef.current) return;\r\n    if (isPlaying) {\r\n      // Only play if metadata is loaded\r\n      if (!audioRef.current.paused && !audioRef.current.ended) return;\r\n      audioRef.current.play().catch(() => {});\r\n    } else {\r\n      audioRef.current.pause();\r\n    }\r\n  }, [isPlaying, selectedTrack]);\r\n\r\n  const handleLoadedMetadata = useCallback(() => {\r\n    setDuration(audioRef.current.duration);\r\n    // Auto-play if flagged\r\n    if (shouldAutoPlay.current) {\r\n      audioRef.current.play().catch(() => {});\r\n      shouldAutoPlay.current = false;\r\n    }\r\n  }, []);\r\n\r\n  const handleTimeUpdate = useCallback(() => {\r\n    setCurrentTime(audioRef.current.currentTime);\r\n  }, []);\r\n\r\n  const handleSeek = useCallback((e) => {\r\n    const time = Number(e.target.value);\r\n    audioRef.current.currentTime = time;\r\n    setCurrentTime(time);\r\n  }, []);\r\n\r\n  const handleVolumeChange = useCallback((e) => {\r\n    const vol = Number(e.target.value);\r\n    setVolume(vol);\r\n    audioRef.current.volume = vol;\r\n  }, []);\r\n\r\n  const handleEnded = useCallback(() => {\r\n    setIsPlaying(false);\r\n  }, []);\r\n\r\n  const handlePlayPause = useCallback(() => {\r\n    setIsPlaying((prev) => !prev);\r\n  }, []);\r\n\r\n  const formatTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  if (!selectedTrack) return null;\r\n\r\n  return (\r\n    <div className=\"music-player\">\r\n      {/* --- RENDER OPTIMIZATION ---\r\n          All playback controls and state are internal to AudioPlayer. */}\r\n      <div className=\"player-info\">\r\n        <div className=\"track-cover-container\">\r\n          <img\r\n            src={selectedTrack.coverImage ? `http://localhost:5000/${selectedTrack.coverImage}` : ''}\r\n            alt={selectedTrack.title}\r\n            className=\"track-cover\"\r\n          />\r\n        </div>\r\n        <div className=\"track-details\">\r\n          <h3>{selectedTrack.title}</h3>\r\n          <p>{selectedTrack.artist?.name || 'Unknown Artist'}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"volume-controls\">\r\n        <span className=\"volume-icon\">🔊</span>\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"1\"\r\n          step=\"0.01\"\r\n          value={volume}\r\n          onChange={handleVolumeChange}\r\n          className=\"volume-slider\"\r\n        />\r\n      </div>\r\n      <div className=\"player-controls\">\r\n        <div className=\"control-buttons\">\r\n          <button className=\"control-button play-pause\" onClick={handlePlayPause}>\r\n            {isPlaying ? '❚❚' : '▶'}\r\n          </button>\r\n        </div>\r\n        <div className=\"progress-bar\">\r\n          <span className=\"time-info\">{formatTime(currentTime)}&nbsp;/&nbsp;{formatTime(duration)}</span>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max={duration || 0}\r\n            value={currentTime}\r\n            onChange={handleSeek}\r\n            className=\"progress-slider\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <audio\r\n        ref={audioRef}\r\n        src={`http://localhost:5000/${selectedTrack.audioFile}`}\r\n        onLoadedMetadata={handleLoadedMetadata}\r\n        onTimeUpdate={handleTimeUpdate}\r\n        onEnded={handleEnded}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default AudioPlayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}