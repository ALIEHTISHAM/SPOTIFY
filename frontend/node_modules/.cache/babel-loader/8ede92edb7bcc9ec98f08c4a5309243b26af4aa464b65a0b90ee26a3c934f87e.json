{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maali\\\\OneDrive\\\\Desktop\\\\MUSIC\\\\frontend\\\\src\\\\components\\\\CancelSubscription.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useSubscriptionField } from '../context/SubscriptionContext';\nimport { useAuth } from '../context/AuthContext';\nimport '../styles/CancelSubscription.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CancelSubscription = () => {\n  _s();\n  const hasSubscription = useSubscriptionField(ctx => ctx.hasSubscription);\n  const loading = useSubscriptionField(ctx => ctx.loading);\n  const cancelSubscription = useSubscriptionField(ctx => ctx.cancelSubscription);\n  const subscriptionDetails = useSubscriptionField(ctx => ctx.subscriptionDetails);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    console.log('CancelSubscription mounted');\n    console.log('hasSubscription (from context):', hasSubscription);\n    console.log('loading:', loading);\n    console.log('user:', user);\n    console.log('subscriptionDetails (from context):', subscriptionDetails);\n  }, [hasSubscription, loading, user, subscriptionDetails]);\n\n  // Add detailed logs for rendering conditions\n  useEffect(() => {\n    console.log('CancelSubscription rendering check:');\n    console.log('  loading:', loading);\n    console.log('  subscriptionDetails:', subscriptionDetails);\n    if (subscriptionDetails) {\n      console.log('  subscriptionDetails.status (from DB):', subscriptionDetails.status);\n      console.log('  subscriptionDetails.hasSubscription (current access):', subscriptionDetails.hasSubscription);\n      console.log('  subscriptionDetails.currentPeriodEnd:', subscriptionDetails.currentPeriodEnd);\n      // Note: currentPeriodEnd here is the *effective* end date of access from the backend\n      const effectiveEndDate = new Date(subscriptionDetails.currentPeriodEnd);\n      console.log('  Effective end date object:', effectiveEndDate);\n      console.log('  Current date object:', new Date());\n      console.log('  Is effective end date <= current date:', effectiveEndDate <= new Date());\n    }\n    const isCancelledInDB = (subscriptionDetails === null || subscriptionDetails === void 0 ? void 0 : subscriptionDetails.status) === 'cancelled';\n    const hasCurrentAccess = subscriptionDetails === null || subscriptionDetails === void 0 ? void 0 : subscriptionDetails.hasSubscription;\n    const hasDetails = !!subscriptionDetails;\n    const shouldReturnNull = !hasDetails || isCancelledInDB && !hasCurrentAccess;\n    const shouldShowCancelledMessage = hasDetails && isCancelledInDB && hasCurrentAccess; // Only show message if cancelled but still has access\n    const shouldShowCancelButton = hasDetails && !isCancelledInDB && hasCurrentAccess; // Only show button if active in DB and has access\n\n    console.log('  isCancelledInDB:', isCancelledInDB);\n    console.log('  hasCurrentAccess:', hasCurrentAccess);\n    console.log('  hasDetails:', hasDetails);\n    console.log('  shouldReturnNull:', shouldReturnNull);\n    console.log('  shouldShowCancelledMessage:', shouldShowCancelledMessage);\n    console.log('  shouldShowCancelButton:', shouldShowCancelButton);\n  }, [loading, subscriptionDetails]);\n  if (loading) {\n    console.log('CancelSubscription: Rendering loading state.');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cancel-subscription-loading\",\n      children: \"Loading subscription status...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Function to format date\n  const formatDate = dateString => {\n    if (!dateString) return 'N/A';\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n\n  // Render logic based on subscription details from backend\n  // Check if we should render null (no subscription details or cancelled and access ended)\n  if (!subscriptionDetails || subscriptionDetails.status === 'cancelled' && !subscriptionDetails.hasSubscription) {\n    console.log('CancelSubscription: Returning null (no subscription or cancelled and access ended).');\n    return null;\n  }\n\n  // Check if we should show the cancelled message (cancelled in DB AND still has access)\n  if (subscriptionDetails.status === 'cancelled' && subscriptionDetails.hasSubscription) {\n    console.log('CancelSubscription: Rendering cancelled message (DB status is cancelled and has access).');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cancel-subscription\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Subscription Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cancel-note\",\n        children: [\"Your subscription is set to cancel on \", formatDate(subscriptionDetails.currentPeriodEnd), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Check if we should show the cancel button (active in DB AND still has access)\n  if (subscriptionDetails.status === 'active' && subscriptionDetails.hasSubscription) {\n    console.log('CancelSubscription: Rendering cancel button (DB status active and has access).');\n    const handleCancel = async () => {\n      try {\n        const result = await cancelSubscription();\n        console.log('Cancel subscription result:', result);\n        if (result.success) {\n          alert('Your subscription will be cancelled at the end of the billing period.');\n        } else {\n          alert(result.message || 'Failed to cancel subscription. Please try again.');\n        }\n      } catch (error) {\n        console.error('Error cancelling subscription:', error);\n        alert('An error occurred while cancelling your subscription. Please try again.');\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cancel-subscription\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Subscription Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"cancel-button\",\n        onClick: handleCancel,\n        children: \"Cancel Subscription\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cancel-note\",\n        children: \"Your subscription will remain active until the end of the current billing period.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Fallback: Should theoretically not be reached if logic covers all states, but included for safety\n  console.log('CancelSubscription: Returning null - Fallback.', subscriptionDetails);\n  return null;\n};\n_s(CancelSubscription, \"nolckZ8mw+v04wBwXMGyBkmymcw=\", false, function () {\n  return [useSubscriptionField, useSubscriptionField, useSubscriptionField, useSubscriptionField, useAuth];\n});\n_c = CancelSubscription;\nexport default CancelSubscription;\nvar _c;\n$RefreshReg$(_c, \"CancelSubscription\");","map":{"version":3,"names":["React","useEffect","useSubscriptionField","useAuth","jsxDEV","_jsxDEV","CancelSubscription","_s","hasSubscription","ctx","loading","cancelSubscription","subscriptionDetails","user","console","log","status","currentPeriodEnd","effectiveEndDate","Date","isCancelledInDB","hasCurrentAccess","hasDetails","shouldReturnNull","shouldShowCancelledMessage","shouldShowCancelButton","className","children","fileName","_jsxFileName","lineNumber","columnNumber","formatDate","dateString","options","year","month","day","toLocaleDateString","undefined","handleCancel","result","success","alert","message","error","onClick","_c","$RefreshReg$"],"sources":["C:/Users/maali/OneDrive/Desktop/MUSIC/frontend/src/components/CancelSubscription.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSubscriptionField } from '../context/SubscriptionContext';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport '../styles/CancelSubscription.css';\r\n\r\nconst CancelSubscription = () => {\r\n  const hasSubscription = useSubscriptionField(ctx => ctx.hasSubscription);\r\n  const loading = useSubscriptionField(ctx => ctx.loading);\r\n  const cancelSubscription = useSubscriptionField(ctx => ctx.cancelSubscription);\r\n  const subscriptionDetails = useSubscriptionField(ctx => ctx.subscriptionDetails);\r\n  const { user } = useAuth();\r\n\r\n  useEffect(() => {\r\n    console.log('CancelSubscription mounted');\r\n    console.log('hasSubscription (from context):', hasSubscription);\r\n    console.log('loading:', loading);\r\n    console.log('user:', user);\r\n    console.log('subscriptionDetails (from context):', subscriptionDetails);\r\n  }, [hasSubscription, loading, user, subscriptionDetails]);\r\n\r\n  // Add detailed logs for rendering conditions\r\n  useEffect(() => {\r\n    console.log('CancelSubscription rendering check:');\r\n    console.log('  loading:', loading);\r\n    console.log('  subscriptionDetails:', subscriptionDetails);\r\n    if (subscriptionDetails) {\r\n      console.log('  subscriptionDetails.status (from DB):', subscriptionDetails.status);\r\n      console.log('  subscriptionDetails.hasSubscription (current access):', subscriptionDetails.hasSubscription);\r\n      console.log('  subscriptionDetails.currentPeriodEnd:', subscriptionDetails.currentPeriodEnd);\r\n      // Note: currentPeriodEnd here is the *effective* end date of access from the backend\r\n      const effectiveEndDate = new Date(subscriptionDetails.currentPeriodEnd);\r\n      console.log('  Effective end date object:', effectiveEndDate);\r\n      console.log('  Current date object:', new Date());\r\n      console.log('  Is effective end date <= current date:', effectiveEndDate <= new Date());\r\n    }\r\n\r\n    const isCancelledInDB = subscriptionDetails?.status === 'cancelled';\r\n    const hasCurrentAccess = subscriptionDetails?.hasSubscription;\r\n    const hasDetails = !!subscriptionDetails;\r\n\r\n    const shouldReturnNull = !hasDetails || (isCancelledInDB && !hasCurrentAccess);\r\n    const shouldShowCancelledMessage = hasDetails && isCancelledInDB && hasCurrentAccess; // Only show message if cancelled but still has access\r\n    const shouldShowCancelButton = hasDetails && !isCancelledInDB && hasCurrentAccess; // Only show button if active in DB and has access\r\n\r\n    console.log('  isCancelledInDB:', isCancelledInDB);\r\n    console.log('  hasCurrentAccess:', hasCurrentAccess);\r\n    console.log('  hasDetails:', hasDetails);\r\n    console.log('  shouldReturnNull:', shouldReturnNull);\r\n    console.log('  shouldShowCancelledMessage:', shouldShowCancelledMessage);\r\n    console.log('  shouldShowCancelButton:', shouldShowCancelButton);\r\n\r\n  }, [loading, subscriptionDetails]);\r\n\r\n  if (loading) {\r\n    console.log('CancelSubscription: Rendering loading state.');\r\n    return <div className=\"cancel-subscription-loading\">Loading subscription status...</div>;\r\n  }\r\n\r\n  // Function to format date\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  // Render logic based on subscription details from backend\r\n  // Check if we should render null (no subscription details or cancelled and access ended)\r\n  if (!subscriptionDetails || (subscriptionDetails.status === 'cancelled' && !subscriptionDetails.hasSubscription)) {\r\n     console.log('CancelSubscription: Returning null (no subscription or cancelled and access ended).');\r\n     return null;\r\n  }\r\n\r\n  // Check if we should show the cancelled message (cancelled in DB AND still has access)\r\n  if (subscriptionDetails.status === 'cancelled' && subscriptionDetails.hasSubscription) {\r\n    console.log('CancelSubscription: Rendering cancelled message (DB status is cancelled and has access).');\r\n    return (\r\n      <div className=\"cancel-subscription\">\r\n        <h3>Subscription Management</h3>\r\n        <p className=\"cancel-note\">\r\n          Your subscription is set to cancel on {formatDate(subscriptionDetails.currentPeriodEnd)}.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Check if we should show the cancel button (active in DB AND still has access)\r\n  if (subscriptionDetails.status === 'active' && subscriptionDetails.hasSubscription) {\r\n     console.log('CancelSubscription: Rendering cancel button (DB status active and has access).');\r\n     const handleCancel = async () => {\r\n      try {\r\n        const result = await cancelSubscription();\r\n        console.log('Cancel subscription result:', result);\r\n        if (result.success) {\r\n          alert('Your subscription will be cancelled at the end of the billing period.');\r\n        } else {\r\n          alert(result.message || 'Failed to cancel subscription. Please try again.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error cancelling subscription:', error);\r\n        alert('An error occurred while cancelling your subscription. Please try again.');\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className=\"cancel-subscription\">\r\n        <h3>Subscription Management</h3>\r\n        <button \r\n          className=\"cancel-button\"\r\n          onClick={handleCancel}\r\n        >\r\n          Cancel Subscription\r\n        </button>\r\n        <p className=\"cancel-note\">\r\n          Your subscription will remain active until the end of the current billing period.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Fallback: Should theoretically not be reached if logic covers all states, but included for safety\r\n   console.log('CancelSubscription: Returning null - Fallback.', subscriptionDetails);\r\n   return null;\r\n};\r\n\r\nexport default CancelSubscription; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}