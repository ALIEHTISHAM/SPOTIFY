{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maali\\\\OneDrive\\\\Desktop\\\\MUSIC\\\\frontend\\\\src\\\\components\\\\TrackList.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport { useTrack } from '../context/TrackContext';\nimport { useSearchFilter } from '../context/SearchFilterContext';\nimport TrackCard from './TrackCard';\nimport CommentOverlay from './CommentOverlay';\nimport FilterBar from './FilterBar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TrackList = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(function TrackList({\n  tracks,\n  hasSubscription,\n  subscriptionDetails\n}) {\n  _s();\n  console.log('rendering tracklist');\n  const {\n    selectedTrack,\n    setSelectedTrack\n  } = useTrack();\n  const {\n    searchQuery,\n    setSearchQuery,\n    selectedGenre,\n    setSelectedGenre,\n    selectedArtist,\n    setSelectedArtist\n  } = useSearchFilter();\n  const [commentOverlayOpen, setCommentOverlayOpen] = React.useState(false);\n  const [commentTrack, setCommentTrack] = React.useState(null);\n\n  // Filter tracks based on search and filters\n  const filteredTracks = tracks.filter(track => {\n    var _track$artist, _track$artist2;\n    const matchesSearch = searchQuery ? track.title.toLowerCase().includes(searchQuery.toLowerCase()) || ((_track$artist = track.artist) === null || _track$artist === void 0 ? void 0 : _track$artist.name.toLowerCase().includes(searchQuery.toLowerCase())) : true;\n    const matchesGenre = selectedGenre ? track.genre.toLowerCase() === selectedGenre.toLowerCase() : true;\n    const matchesArtist = selectedArtist ? ((_track$artist2 = track.artist) === null || _track$artist2 === void 0 ? void 0 : _track$artist2.name.toLowerCase()) === selectedArtist.toLowerCase() : true;\n    return matchesSearch && matchesGenre && matchesArtist;\n  });\n\n  // Get unique genres and artists for filter dropdowns\n  const uniqueGenres = [...new Set(tracks.map(track => track.genre))];\n  const uniqueArtists = [...new Set(tracks.map(track => {\n    var _track$artist3;\n    return (_track$artist3 = track.artist) === null || _track$artist3 === void 0 ? void 0 : _track$artist3.name;\n  }).filter(Boolean))];\n\n  // Clear all filters\n  const handleClearFilters = () => {\n    setSelectedArtist('');\n    setSelectedGenre('');\n    setSearchQuery('');\n  };\n\n  // Play logic (memoized)\n  const handlePlay = useCallback(track => {\n    if (!hasSubscription) {\n      if ((subscriptionDetails === null || subscriptionDetails === void 0 ? void 0 : subscriptionDetails.status) === 'cancelled') {\n        alert('Your subscription has ended. Please resubscribe to continue streaming music.');\n      } else {\n        alert('Please subscribe to stream music');\n      }\n      return;\n    }\n    setSelectedTrack(track);\n  }, [hasSubscription, subscriptionDetails, setSelectedTrack]);\n  const handleOpenComments = React.useCallback(track => {\n    setCommentTrack(track);\n    setCommentOverlayOpen(true);\n  }, []);\n  const handleCloseComments = React.useCallback(() => {\n    setCommentOverlayOpen(false);\n    setCommentTrack(null);\n  }, []);\n\n  // Determine if filters should be shown based on searchQuery\n  const showFilters = !!searchQuery;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showFilters && /*#__PURE__*/_jsxDEV(FilterBar, {\n      uniqueArtists: uniqueArtists,\n      uniqueGenres: uniqueGenres,\n      selectedArtist: selectedArtist,\n      setSelectedArtist: setSelectedArtist,\n      selectedGenre: selectedGenre,\n      setSelectedGenre: setSelectedGenre,\n      handleClearFilters: handleClearFilters,\n      resultsCount: filteredTracks.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracks-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tracks-grid\",\n        children: filteredTracks.map(track => /*#__PURE__*/_jsxDEV(TrackCard, {\n          track: track,\n          isSelected: (selectedTrack === null || selectedTrack === void 0 ? void 0 : selectedTrack._id) === track._id,\n          onSelect: handlePlay,\n          onOpenComments: handleOpenComments\n        }, track._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CommentOverlay, {\n        open: commentOverlayOpen,\n        onClose: handleCloseComments,\n        track: commentTrack,\n        allTracks: tracks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}, \"1LsAjJ7ldh+jWZ8EHhWR98R0+Mc=\", false, function () {\n  return [useTrack, useSearchFilter];\n})), \"1LsAjJ7ldh+jWZ8EHhWR98R0+Mc=\", false, function () {\n  return [useTrack, useSearchFilter];\n});\n_c2 = TrackList;\nexport default TrackList;\nvar _c, _c2;\n$RefreshReg$(_c, \"TrackList$React.memo\");\n$RefreshReg$(_c2, \"TrackList\");","map":{"version":3,"names":["React","useCallback","useTrack","useSearchFilter","TrackCard","CommentOverlay","FilterBar","jsxDEV","_jsxDEV","Fragment","_Fragment","TrackList","_s","memo","_c","tracks","hasSubscription","subscriptionDetails","console","log","selectedTrack","setSelectedTrack","searchQuery","setSearchQuery","selectedGenre","setSelectedGenre","selectedArtist","setSelectedArtist","commentOverlayOpen","setCommentOverlayOpen","useState","commentTrack","setCommentTrack","filteredTracks","filter","track","_track$artist","_track$artist2","matchesSearch","title","toLowerCase","includes","artist","name","matchesGenre","genre","matchesArtist","uniqueGenres","Set","map","uniqueArtists","_track$artist3","Boolean","handleClearFilters","handlePlay","status","alert","handleOpenComments","handleCloseComments","showFilters","children","resultsCount","length","fileName","_jsxFileName","lineNumber","columnNumber","className","isSelected","_id","onSelect","onOpenComments","open","onClose","allTracks","_c2","$RefreshReg$"],"sources":["C:/Users/maali/OneDrive/Desktop/MUSIC/frontend/src/components/TrackList.js"],"sourcesContent":["import React, { useCallback } from 'react';\r\nimport { useTrack } from '../context/TrackContext';\r\nimport { useSearchFilter } from '../context/SearchFilterContext';\r\nimport TrackCard from './TrackCard';\r\nimport CommentOverlay from './CommentOverlay';\r\nimport FilterBar from './FilterBar';\r\n\r\nconst TrackList = React.memo(function TrackList({ tracks, hasSubscription, subscriptionDetails }) {\r\n  console.log('rendering tracklist');\r\n\r\n  const { selectedTrack, setSelectedTrack } = useTrack();\r\n  const {\r\n    searchQuery,\r\n    setSearchQuery,\r\n    selectedGenre,\r\n    setSelectedGenre,\r\n    selectedArtist,\r\n    setSelectedArtist\r\n  } = useSearchFilter();\r\n\r\n  const [commentOverlayOpen, setCommentOverlayOpen] = React.useState(false);\r\n  const [commentTrack, setCommentTrack] = React.useState(null);\r\n\r\n  // Filter tracks based on search and filters\r\n  const filteredTracks = tracks.filter(track => {\r\n    const matchesSearch = searchQuery ?\r\n      track.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      track.artist?.name.toLowerCase().includes(searchQuery.toLowerCase()) : true;\r\n\r\n    const matchesGenre = selectedGenre ?\r\n      track.genre.toLowerCase() === selectedGenre.toLowerCase() : true;\r\n\r\n    const matchesArtist = selectedArtist ?\r\n      track.artist?.name.toLowerCase() === selectedArtist.toLowerCase() : true;\r\n\r\n    return matchesSearch && matchesGenre && matchesArtist;\r\n  });\r\n\r\n  // Get unique genres and artists for filter dropdowns\r\n  const uniqueGenres = [...new Set(tracks.map(track => track.genre))];\r\n  const uniqueArtists = [...new Set(tracks.map(track => track.artist?.name).filter(Boolean))];\r\n\r\n  // Clear all filters\r\n  const handleClearFilters = () => {\r\n    setSelectedArtist('');\r\n    setSelectedGenre('');\r\n    setSearchQuery('');\r\n  };\r\n\r\n  // Play logic (memoized)\r\n  const handlePlay = useCallback((track) => {\r\n    if (!hasSubscription) {\r\n      if (subscriptionDetails?.status === 'cancelled') {\r\n        alert('Your subscription has ended. Please resubscribe to continue streaming music.');\r\n      } else {\r\n        alert('Please subscribe to stream music');\r\n      }\r\n      return;\r\n    }\r\n    setSelectedTrack(track);\r\n  }, [hasSubscription, subscriptionDetails, setSelectedTrack]);\r\n\r\n  const handleOpenComments = React.useCallback((track) => {\r\n    setCommentTrack(track);\r\n    setCommentOverlayOpen(true);\r\n  }, []);\r\n\r\n  const handleCloseComments = React.useCallback(() => {\r\n    setCommentOverlayOpen(false);\r\n    setCommentTrack(null);\r\n  }, []);\r\n\r\n  // Determine if filters should be shown based on searchQuery\r\n  const showFilters = !!searchQuery;\r\n\r\n  return (\r\n    <>\r\n      {showFilters && (\r\n        <FilterBar\r\n          uniqueArtists={uniqueArtists}\r\n          uniqueGenres={uniqueGenres}\r\n          selectedArtist={selectedArtist}\r\n          setSelectedArtist={setSelectedArtist}\r\n          selectedGenre={selectedGenre}\r\n          setSelectedGenre={setSelectedGenre}\r\n          handleClearFilters={handleClearFilters}\r\n          resultsCount={filteredTracks.length}\r\n        />\r\n      )}\r\n      <div className=\"tracks-section\">\r\n        {/* Track Cards */}\r\n        <div className=\"tracks-grid\">\r\n          {filteredTracks.map((track) => (\r\n            <TrackCard\r\n              key={track._id}\r\n              track={track}\r\n              isSelected={selectedTrack?._id === track._id}\r\n              onSelect={handlePlay}\r\n              onOpenComments={handleOpenComments}\r\n            />\r\n          ))}\r\n        </div>\r\n        <CommentOverlay open={commentOverlayOpen} onClose={handleCloseComments} track={commentTrack} allTracks={tracks} />\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default TrackList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}